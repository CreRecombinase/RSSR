// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP RSSR_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP RSSR_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP RSSR_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP RSSR_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr
Eigen::MatrixXd rss_varbvsr(Eigen::SparseMatrix<double> SiRiS, Rcpp::NumericVector sigma_beta, const Eigen::VectorXd logodds, const Eigen::VectorXd betahat, const Eigen::VectorXd se, const Eigen::ArrayXd& alpha0, const Eigen::ArrayXd& mu0, const Eigen::ArrayXd& SiRiSr0);
RcppExport SEXP RSSR_rss_varbvsr(SEXP SiRiSSEXP, SEXP sigma_betaSEXP, SEXP logoddsSEXP, SEXP betahatSEXP, SEXP seSEXP, SEXP alpha0SEXP, SEXP mu0SEXP, SEXP SiRiSr0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type SiRiS(SiRiSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type se(seSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type SiRiSr0(SiRiSr0SEXP);
    rcpp_result_gen = Rcpp::wrap(rss_varbvsr(SiRiS, sigma_beta, logodds, betahat, se, alpha0, mu0, SiRiSr0));
    return rcpp_result_gen;
END_RCPP
}
// rss_varbvsr_update
void rss_varbvsr_update(const double betahat, const double se, const double sigma_beta, const Eigen::ArrayXd& SiRiS_snp, Eigen::ArrayXd& SiRiSr, const double SiRiSr_snp, const double logodds, double& alpha, double& mu);
RcppExport SEXP RSSR_rss_varbvsr_update(SEXP betahatSEXP, SEXP seSEXP, SEXP sigma_betaSEXP, SEXP SiRiS_snpSEXP, SEXP SiRiSrSEXP, SEXP SiRiSr_snpSEXP, SEXP logoddsSEXP, SEXP alphaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const double >::type se(seSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type SiRiS_snp(SiRiS_snpSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type SiRiSr(SiRiSrSEXP);
    Rcpp::traits::input_parameter< const double >::type SiRiSr_snp(SiRiSr_snpSEXP);
    Rcpp::traits::input_parameter< const double >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double& >::type mu(muSEXP);
    rss_varbvsr_update(betahat, se, sigma_beta, SiRiS_snp, SiRiSr, SiRiSr_snp, logodds, alpha, mu);
    return R_NilValue;
END_RCPP
}
// SiRSi
Eigen::SparseMatrix<double> SiRSi(const Eigen::SparseMatrix<double>& R, const Eigen::VectorXd Si);
RcppExport SEXP RSSR_SiRSi(SEXP RSEXP, SEXP SiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type Si(SiSEXP);
    rcpp_result_gen = Rcpp::wrap(SiRSi(R, Si));
    return rcpp_result_gen;
END_RCPP
}
